@model SIA_Portal.Models.AdminModels.CreateEditEmployeeAccountModel
@using SIA_Portal.Constants;
@{
    ViewBag.Title = "Admin_CreateEditGenericAccountPage";
    Layout = "~/Views/Shared/Shared_NavBar.cshtml";
}


<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- Google Fonts CDN -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap"
          rel="stylesheet" />

    <!-- Custom CSS -->
    <link rel="stylesheet" href="~/Res/Css/forms_account_style.css" type="text/css"/>


    <title>@Model.GetHeaderToDisplay()</title>
</head>


<main>
    <div><!--class="section-1"-->
        @using (Html.BeginForm(ActionNameConstants.ADMIN_SIDE__CREATE_EDIT_EMPLOYEE_ACCOUNT_PAGE__EXECUTE_ACTION, ControllerNameConstants.ADMIN_CONTROLLER_NAME))
        {
            @Html.HiddenFor(m => m.AccountType)
            @Html.HiddenFor(m => m.AccountId)

            <div class="form-wrapper">
                <p>@Model.GetHeaderToDisplay()</p>
                <fieldset class="announcement-content">
                    <legend>Account General Config</legend>
                    <div class="text-content-wrapper">
                        <p>Username</p>

                        @{
                            object usernameHtmlAttr = null;

                            if (Model.IsActionEditAccount())
                            {
                                usernameHtmlAttr = new { @placeholder = "Username", autocomplete = "off", @style = "width: 300px", @readonly = "readonly" };
                            }
                            else
                            {
                                usernameHtmlAttr = new { @placeholder = "Username", autocomplete = "off", @style = "width: 300px" };
                            }
                        }

                        @Html.TextBoxFor(m => m.InputUsername, usernameHtmlAttr)
                        <br />
                        @Html.ValidationMessageFor(m => m.InputUsername, "", new { @class = "text-danger", @style = "color:darkred" })

                    </div>

                    <div class="text-content-wrapper">

                        <p>Category</p>
                        <br>
                        <br>
                        @Html.DropDownListFor(m => m.InputChosenEmployeeCategory, new SelectList(Model.ListOfEmployeeCategories), new { })

                        <br>
                        <br>

                        <center>
                            <label>Disable From Log In</label> @Html.CheckBoxFor(m => m.InputDisabledFromLogIn)
                        </center>
                    </div>
                </fieldset>

                <fieldset class="announcement-content">
                    <legend>Account Password</legend>
                    <div class="text-content-wrapper">

                        <p>Password</p>
                        @Html.PasswordFor(m => m.InputPassword, new { @placeholder = "Password" })
                        @Html.ValidationMessageFor(m => m.InputPassword, "", new { @class = "text-danger", @style = "color:darkred" })

                        <p>Confirm Password</p>
                        @Html.PasswordFor(m => m.InputConfirmPassword, new { @placeholder = "Confirm Password" })
                        @Html.ValidationMessageFor(m => m.InputConfirmPassword, "", new { @class = "text-danger", @style = "color:darkred" })

                        <br/>
                        @if (Model.IsActionEditAccount())
                        {
                            <center>
                                <label>No Change on Password</label> @Html.CheckBoxFor(m => m.InputNoChangeOnPassword)
                            </center>
                            <br/>
                        }

                        <center>
                            <label>Generate Random Password Instead</label> @Html.CheckBoxFor(m => m.InputGenerateRandomPasswordInstead)
                        </center>
                        <br />

                    </div>
                </fieldset>

                <br/>
                <div>
                    <br/>
                    <br/>
                    <br/>
                    <br/>
                    @{

                        bool toShow = false;
                        string colorToUse = "";

                        if (Model.ActionExecuteStatus == ActionStatusConstants.STATUS_FAILED)
                        {
                            toShow = true;
                            //colorToUse = "color:darkred";
                        }
                        else if (Model.ActionExecuteStatus == ActionStatusConstants.STATUS_SUCCESS)
                        {
                            toShow = true;
                            //colorToUse = "color:green";
                        }
                        colorToUse = ActionStatusConstants.GetColorAsStringAssociatedWithStatus(Model.ActionExecuteStatus);

                        if (toShow)
                        {
                            <center>
                                <p style="@colorToUse">@Model.StatusMessage</p>
                            </center>
                        }

                    }
                    <br/>

                    <center class="button-wrapper">
                        <button type="submit" name="executeAction" value="createAccount">@Model.GetButtonTextDisplay()</button>
                    </center>
                </div>

            </div>
        }
    </div>
</main>

