@model SIA_Portal.Models.GenericUserModel.RequestForDocumentModel
@using SIA_Portal.Constants;
@using SIA_Portal.Models.ObjectRepresentations; 
@{
    ViewBag.Title = "GenericUser_RequestDocumentPage";
    Layout = "~/Views/Shared/Shared_NavBar.cshtml";
}



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ"
            crossorigin="anonymous"></script>

    <script src="//code.jquery.com/jquery-2.1.1.min.js" type="text/javascript"></script>

    <!-- Google Fonts CDN -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap"
          rel="stylesheet" />

    <!-- Custom CSS -->
    <link rel="stylesheet" href="~/Res/Css/forms_styles.css" type="text/css" />
    <title>Requesting Document</title>


    <script type="text/javascript">
        $(document).ready(function() {
            $("#reqDocuDropDownList").on("change", function () {
                
                var selectedItem = $(this).val();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.Action(@ActionNameConstants.GENERIC_USER__REQUEST_DOCUMENT_ID_SELECTED, "GenericUser"))",
                    data: { "docuId": selectedItem},
                    success: function (data) {
                        //ddlStates.html('');
                        $("#documentNoteTextArea").val(data.FullDescription)

                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');

                    }
                });

            });

        });
    </script>

</head>


<body>
    <main>
        @using (Html.BeginForm(ActionNameConstants.GENERIC_USER__REQUEST_FOR_DOCUMENT__EXECUTE_ACTION, ControllerNameConstants.GENERIC_USER_CONTROLLER_NAME,
            FormMethod.Post, new { enctype = "multipart/form-data" }))
        {

            if (Model.AllRequestableDocumentRepresentations != null)
            {
                foreach (RequestableDocumentRepresentation rep in Model.AllRequestableDocumentRepresentations)
                {
                    Html.HiddenFor(m => rep.Id);
                    Html.HiddenFor(m => rep.FullDescription);
                    Html.HiddenFor(m => rep.Title);
                }
            }

        <div class="form-wrapper">
            <fieldset class="announcement-info" style="box-sizing:border-box">
                <legend>Document to Request:</legend>

                <div class="col-8">

                    @Html.DropDownListFor(m => m.SelectedDocumentRepId, new SelectList(Model.AllRequestableDocumentRepresentations, "Id", "Title", Model.SelectedDocumentRepresentation), new { @class = "dropdown", @id = "reqDocuDropDownList" })

                </div>
            </fieldset>

            <br /><br />
            <fieldset class="announcement-content">
                <legend>Reason for Request, and Additional Details:</legend>
                <div class="text-content-wrapper">
                    @Html.TextAreaFor(m => m.InputReasonForRequest, new { @rows = 5, @cols = 40 })
                </div>

            </fieldset>

            @if (Model != null && Model.SelectedDocumentRepresentation != null)
            {

                <div class="row">
                    <div class="col-4"><p>Note to Requester:</p></div>
                    <div class="col-8">
                        <textarea class="textarea" rows="5" cols="50" readonly="readonly" id="documentNoteTextArea">@Model.SelectedDocumentRepresentation.FullDescription</textarea>
                    </div>
                </div>

            }


            <br />
            @{

                bool toShow = false;
                string colorToUse = "";

                if (Model.ActionExecuteStatus == ActionStatusConstants.STATUS_FAILED)
                {
                    toShow = true;
                    //colorToUse = "color:darkred";
                }
                else if (Model.ActionExecuteStatus == ActionStatusConstants.STATUS_SUCCESS)
                {
                    toShow = true;
                    //colorToUse = "color:green";
                }
                colorToUse = ActionStatusConstants.GetColorAsStringAssociatedWithStatus(Model.ActionExecuteStatus);

                if (toShow)
                {
                    <center>
                        <p style="@colorToUse">@Model.StatusMessage</p>
                    </center>
                }

            }
            <br />

            <div class="button-wrapper">
                <button type="submit" name="executeAction" value="RequestAction">Request Document</button>
            </div>
            <br />
            <div class="button-wrapper">
                <button type="submit" name="executeAction" value="CancelAction">Cancel</button>
            </div>
            <br />
            <br />
        </div>
        }
    </main>
</body>
</html>