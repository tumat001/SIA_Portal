@model SIA_Portal.Models.GenericUserModel.ChangeOwnAccountSettingsModel
@using SIA_Portal.Constants;
@{
    ViewBag.Title = "GenericUser_ChangeOwnPasswordPage";
    Layout = "~/Views/Shared/Shared_NavBar.cshtml";
}



<style>
    .box {
        text-align: center;
        width: 80%;
        border: 1px solid black;
        padding: 1rem;
        margin: 1% 10% 5% 10%;
        background-color: white;
    }

        .box input {
            width: 50%;
        }

    .dropdown,
    .textarea {
        width: 50%;
    }

    .btn-req {
        cursor: pointer;
        border: 1px solid black;
        background-color: blue;
        height: 50px;
        width: 200px;
        font-size: 15px;
        padding: .5rem;
        color: white;
    }

    .center {
        text-align: center;
    }

    .main-container {
        border: 1px solid black;
        margin: auto;
        background-color: rgb(128, 128, 128, 0.6);
        width: 50%;
        height: auto;
    }

        .main-container h2 {
            color: black;
            margin: 5%;
        }

    .button {
        text-align: center;
        margin-bottom: 20px;
    }
</style>

<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ"
            crossorigin="anonymous"></script>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Change Account Settings</title>
</head>

<body>
    <br />
    @using (Html.BeginForm(ActionNameConstants.GENERIC_USER__CHANGE_OWN_PASSWORD__GO_TO, ControllerNameConstants.GENERIC_USER_CONTROLLER_NAME))
    {
        <div class="main-container">
            <h2 class="center">Account Settings</h2>

            <div class="box">
                <center>
                    <h3>Password</h3>
                </center>
                <div class="container">
                    <div class="row">
                        <div class="col-4">
                            <p>Current Password</p>
                        </div>
                        <!--<div class="col-8"><input type="password" autocomplete="off" required></div>-->
                        @Html.PasswordFor(m => m.InputCurrentPassword, new { @class = "col-8" })
                        @Html.ValidationMessageFor(m => m.InputCurrentPassword, "", new { @class = "text-danger", @style = "color:darkred" })
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-4">
                            <p>New password</p>
                        </div>

                        @Html.PasswordFor(m => m.InputNewPassword, new { @class = "col-8" })
                        @Html.ValidationMessageFor(m => m.InputNewPassword, "", new { @class = "text-danger", @style = "color:darkred" })
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-4">
                            <p>Confirm Password</p>
                        </div>

                        @Html.PasswordFor(m => m.InputConfirmNewPassword, new { @class = "col-8" })
                        @Html.ValidationMessageFor(m => m.InputConfirmNewPassword, "", new { @class = "text-danger", @style = "color:darkred" })
                    </div>
                    <br />
                    <div class="row">


                    </div>

                    <center class="row">
                        @{
                            bool toShow = false;
                            string colorToUse = "";

                            if (Model.ChangeOwnSettingsStatus == ActionStatusConstants.STATUS_FAILED)
                            {
                                toShow = true;
                                //colorToUse = "color:darkred";
                            }
                            else if (Model.ChangeOwnSettingsStatus == ActionStatusConstants.STATUS_SUCCESS)
                            {
                                toShow = true;
                                //colorToUse = "color:green";
                            }
                            colorToUse = ActionStatusConstants.GetColorAsStringAssociatedWithStatus(Model.ChangeOwnSettingsStatus);

                            if (toShow)
                            {
                                <center>
                                    <div>
                                        <p style="@colorToUse">@Model.StatusMessage</p>
                                    </div>
                                </center>
                            }
                        }
                    </center>
                </div>
            </div>

            <div class="button">
                <button type="submit" class="btn-req">Save Changes</button>
                <!-- //Html.ActionLink("Save Changes", ActionNameConstants.GENERIC_USER_EXECUTE_CHANGE_OWN_ACCOUNT_SETTINGS, new { }, new { class = "btn_req"}) -->
            </div>

        </div>
    }
</body>
